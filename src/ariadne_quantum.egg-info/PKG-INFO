Metadata-Version: 2.4
Name: ariadne-quantum
Version: 0.1.0
Summary: Intelligent quantum circuit routing system with automatic backend selection and performance optimization
Author: Shannon Labs
License-Expression: Apache-2.0
Keywords: quantum,simulator,qasm3,quantum-computing,apple-silicon,cuda,jax,metal,intelligent-routing,bell-labs,shannon-labs
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Education
Classifier: Intended Audience :: Science/Research
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Scientific/Engineering
Classifier: Topic :: Scientific/Engineering :: Physics
Classifier: Topic :: Education
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.11
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: qiskit>=2.1.1
Requires-Dist: qiskit-aer>=0.17.2
Requires-Dist: stim>=1.15.0
Requires-Dist: quimb>=1.11.2
Requires-Dist: cotengra>=0.7.5
Requires-Dist: opt_einsum>=3.3
Requires-Dist: mqt.ddsim>=2.0.0
Requires-Dist: numpy>=1.21
Requires-Dist: scipy>=1.7
Requires-Dist: networkx>=3.0
Requires-Dist: matplotlib>=3.5.0
Requires-Dist: pytest>=7.0.0
Provides-Extra: cuda
Requires-Dist: cupy-cuda12x>=12.0.0; extra == "cuda"
Provides-Extra: apple
Requires-Dist: jax>=0.4; (platform_system == "Darwin" and platform_machine == "arm64") and extra == "apple"
Requires-Dist: jaxlib>=0.4; (platform_system == "Darwin" and platform_machine == "arm64") and extra == "apple"
Requires-Dist: jax-metal>=0.1; (platform_system == "Darwin" and platform_machine == "arm64") and extra == "apple"
Provides-Extra: viz
Requires-Dist: matplotlib>=3.5; extra == "viz"
Requires-Dist: seaborn>=0.11; extra == "viz"
Requires-Dist: plotly>=5.0; extra == "viz"
Provides-Extra: dev
Requires-Dist: pytest>=7.0; extra == "dev"
Requires-Dist: pytest-cov>=3.0; extra == "dev"
Requires-Dist: black>=22.0; extra == "dev"
Requires-Dist: isort>=5.10; extra == "dev"
Requires-Dist: pre-commit>=2.17; extra == "dev"
Requires-Dist: mypy>=0.950; extra == "dev"
Requires-Dist: pytest-timeout>=2.1; extra == "dev"
Requires-Dist: pytest-xdist>=2.5; extra == "dev"
Requires-Dist: pytest-mock>=3.6; extra == "dev"
Requires-Dist: coverage>=6.0; extra == "dev"
Requires-Dist: bandit>=1.7; extra == "dev"
Requires-Dist: safety>=2.0; extra == "dev"
Provides-Extra: docs
Requires-Dist: sphinx>=5.0; extra == "docs"
Requires-Dist: sphinx-rtd-theme>=1.2; extra == "docs"
Requires-Dist: myst-parser>=0.18; extra == "docs"
Dynamic: license-file

<div align="center">

# Ariadne

**Intelligent Quantum Circuit Routing**

[![Python 3.11+](https://img.shields.io/badge/python-3.11+-blue.svg)](https://www.python.org/downloads/)
[![License: Apache 2.0](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)
[![CI/CD Pipeline](https://img.shields.io/github/actions/workflow/status/Shannon-Labs/ariadne/ci.yml?branch=main&label=CI%2FCD&style=for-the-badge)](https://github.com/Shannon-Labs/ariadne/actions/workflows/ci.yml)
[![codecov](https://img.shields.io/codecov/c/github/Shannon-Labs/ariadne/main?style=for-the-badge)](https://codecov.io/gh/Shannon-Labs/ariadne)

</div>

Ariadne is an intelligent quantum circuit router that automatically analyzes circuit properties and selects the optimal simulator backend. By leveraging mathematical analysis of circuit structure (entropy, treewidth, Clifford ratio), Ariadne delivers significant performance improvements over manual backend selection.

The routing system is designed for transparency and determinism - every routing decision is based on measurable circuit characteristics and can be audited for correctness.

[üìö Documentation Site](https://shannon-labs.github.io/ariadne) ‚Ä¢ [üìñ Local Docs](docs/README.md) ‚Ä¢ [üí° Examples](examples/README.md) ‚Ä¢ [üöÄ Getting Started](#-getting-started) ‚Ä¢ [üìä Benchmarks](#-benchmarks) ‚Ä¢ [ü§ù Contributing](#-contributing)

---

## ‚ú® Key Features

| Capability | Impact |
|------------|--------|
| **üß† Intelligent Routing** | Mathematical analysis of circuit properties (entropy, treewidth, Clifford ratio) automatically selects the optimal backend. |
| **‚ö° Stim Auto-Detection** | Clifford circuits are automatically routed to Stim for massive speedups on large circuits. |
| **üöÄ CUDA Optimization Wins** | Quick wins achieved through optimized indexing and dynamic kernel launch configuration for immediate performance gains. |
| **üçè Apple Silicon Acceleration** | JAX-Metal backend delivers 1.16‚Äì1.51√ó speedups vs. CPU on M-series chips. |
| **üîÑ Zero Configuration** | `simulate(circuit, shots)` just works‚Äîno vendor imports or backend selection logic required. |
| **üî¢ Universal Fallback** | Always returns a result, even when specialized backends fail. |
| **üîå Extensible** | Apache 2.0 licensed with a modular backend interface for community contributions. |

---
## üöÄ The Ariadne Advantage: Specialized Routing

Ariadne's core innovation is its ability to mathematically analyze a circuit's structure to determine the optimal execution environment. This is most evident in our specialized routing capabilities:

### Matrix Product State (MPS) Acceleration

For circuits exhibiting low entanglement‚Äîa common characteristic in many variational quantum algorithms (VQAs) and certain quantum machine learning models‚ÄîAriadne automatically routes execution to the highly optimized MPS Backend.

This specialized routing bypasses the limitations of standard state-vector simulators, delivering **up to 10x performance gains** on relevant circuits.

### Transparent Decision Making

We believe in transparency. Ariadne provides a visualization utility to show exactly *why* a circuit was routed where it was, validating the performance gain:

```mermaid
graph TD
    A[Input Circuit] --> B{MPS Analyzer?};
    B -- PASS (Low Entanglement) --> C[MPS Backend];
    B -- FAIL (High Entanglement) --> D{Other Specialized Analyzer?};
    D -- PASS (e.g., Clifford) --> E[Stim Backend];
    D -- FAIL --> F[Universal Fallback Backend];
    C --> G["Result (10x Speedup)"];
    E --> G;
    F --> G;
```

Use the new visualization utility in [`src/ariadne/visualization.py`](src/ariadne/visualization.py) (Task 6) to inspect the decision path for any circuit.

---

## üöÄ Getting Started

### Installation

```bash
git clone https://github.com/Shannon-Labs/ariadne.git
cd ariadne
pip install -e .
```
Ariadne relies on several high-performance dependencies, including `quimb` for Matrix Product State (MPS) acceleration. These dependencies are automatically installed.

### Your First Simulation

Ariadne automatically routes your circuit to the optimal simulator without any code changes.

```python
from ariadne import simulate
from qiskit import QuantumCircuit

# Create any circuit - let Ariadne handle the rest
qc = QuantumCircuit(20, 20)
qc.h(range(10))
for i in range(9):
    qc.cx(i, i + 1)
qc.measure_all()

# One simple call that handles all backend complexity
result = simulate(qc, shots=1000)
print(f"Backend used: {result.backend_used}")
print(f"Execution time: {result.execution_time:.4f}s")
print(f"Unique outcomes: {len(result.counts)}")
```

---

##  usage

Ariadne provides a simple, unified API for quantum circuit simulation.

### Automatic Detection of Specialized Circuits

Ariadne recognizes when circuits can benefit from specialized simulators like Stim.

```python
from ariadne import simulate
from qiskit import QuantumCircuit

# Large Clifford circuit that would crash plain Qiskit
qc = QuantumCircuit(40, 40)
qc.h(0)
for i in range(39):
    qc.cx(i, i + 1)  # Creates a 40-qubit GHZ state
qc.measure_all()

# Ariadne automatically routes to Stim for optimal performance
result = simulate(qc, shots=1000)
print(f"Backend used: {result.backend_used}")  # -> stim
```


## üìä Benchmarks

### Apple Silicon Metal vs. CPU

| Circuit archetype | Qiskit CPU (ms) | Ariadne Metal (ms) | Speedup |
|-------------------|-----------------|--------------------|---------|
| Small Clifford (H+CX) | 0.64 | 0.45 | **1.43√ó** |
| Medium Clifford | 1.05 | 0.63 | **1.66√ó** |
| Small general (H, CX, RY) | 0.76 | 0.42 | **1.82√ó** |
| Medium general | 1.15 | 0.68 | **1.67√ó** |
| Large Clifford | 1.90 | 1.34 | **1.41√ó** |

*Results from `benchmarks/results/metal_benchmark_results.json` on an Apple M4 Max MacBook Pro.*

### Router Overhead

| Circuit | Router backend | Router mean (ms) | Direct backend mean (ms) |
|---------|----------------|------------------|--------------------------|
| ghz_chain_10 | Stim | 17.9 | Stim 9.4 / Qiskit 1.5 |
| random_clifford_12 | Stim | 339 | Stim 61 / Qiskit 13 |
| random_nonclifford_8 | Tensor network | 111 | Qiskit 1.7 |

**Takeaway:** Use Ariadne when you need automatic capability selection or Apple Silicon acceleration. For tiny circuits where you already know the right backend, direct calls remain faster.

---

## ü§ù Contributing

We welcome contributions of all kinds, from bug fixes to new features. Please read our [**Contributing Guidelines**](docs/project/CONTRIBUTING.md) to get started.

### Development Setup

```bash
git clone https://github.com/Shannon-Labs/ariadne.git
cd ariadne
pip install -e .[dev]

# Run unit tests
make test
```

---

## üí¨ Community

- **GitHub Discussions:** [Ask questions and share ideas](https://github.com/Shannon-Labs/ariadne/discussions)
- **Issue Tracker:** [Report bugs and request features](https://github.com/Shannon-Labs/ariadne/issues)
- **Twitter:** [Follow @ShannonLabs for updates](https://twitter.com/shannonlabs)

---

## üìú License

Ariadne is released under the [Apache 2.0 License](LICENSE).
