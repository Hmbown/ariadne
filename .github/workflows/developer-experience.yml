name: Developer Experience Automation

on:
  pull_request:
    types: [opened, synchronize, reopened]
  issues:
    types: [opened]
  schedule:
    # Weekly maintenance on Sundays at 6 AM UTC
    - cron: '0 6 * * 0'

jobs:
  pr-automation:
    name: PR Automation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      pull-requests: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run PR validation
        run: |
          echo "üîç Running PR validation checks..."

          # Check if PR has description
          if [ -z "${{ github.event.pull_request.body }}" ]; then
            echo "‚ùå PR missing description"
            echo "::warning::PR should have a description"
          else
            echo "‚úÖ PR has description"
          fi

          # Check if tests are affected
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}..HEAD)
          if echo "$CHANGED_FILES" | grep -E "^(src/|tests/)"; then
            echo "üß™ Code changes detected, tests should be added/updated"
          fi

          # Check for breaking changes
          if echo "$CHANGED_FILES" | grep -E "(src/ariadne/__init__.py|src/ariadne/core/)"; then
            echo "‚ö†Ô∏è Potential breaking changes detected in core modules"
            echo "::warning::Review for potential breaking changes"
          fi

      - name: Add size label
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            const additions = pr.additions;
            const deletions = pr.deletions;
            const total = additions + deletions;

            let sizeLabel = '';
            if (total < 10) {
              sizeLabel = 'size/XS';
            } else if (total < 30) {
              sizeLabel = 'size/S';
            } else if (total < 100) {
              sizeLabel = 'size/M';
            } else if (total < 500) {
              sizeLabel = 'size/L';
            } else {
              sizeLabel = 'size/XL';
            }

            // Remove existing size labels
            const existingLabels = pr.labels.map(l => l.name);
            const sizeLabels = ['size/XS', 'size/S', 'size/M', 'size/L', 'size/XL'];
            const labelsToRemove = existingLabels.filter(l => sizeLabels.includes(l));

            if (labelsToRemove.length > 0) {
              await github.rest.issues.removeLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                name: labelsToRemove,
              });
            }

            // Add new size label
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: [sizeLabel],
            });

      - name: Add type labels
        uses: actions/github-script@v7
        with:
          script: |
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            const changedFiles = files.map(f => f.filename);
            const labels = [];

            if (changedFiles.some(f => f.startsWith('docs/'))) {
              labels.push('documentation');
            }
            if (changedFiles.some(f => f.startsWith('tests/'))) {
              labels.push('tests');
            }
            if (changedFiles.some(f => f.includes('Dockerfile') || f.includes('docker'))) {
              labels.push('docker');
            }
            if (changedFiles.some(f => f.includes('requirements') || f.includes('pyproject'))) {
              labels.push('dependencies');
            }
            if (changedFiles.some(f => f.includes('.github/workflows'))) {
              labels.push('ci/cd');
            }

            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: labels,
              });
            }

  issue-automation:
    name: Issue Automation
    runs-on: ubuntu-latest
    if: github.event_name == 'issues'
    permissions:
      issues: write
    steps:
      - name: Add issue labels
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const title = issue.title.toLowerCase();
            const body = issue.body ? issue.body.toLowerCase() : '';

            const labels = [];

            // Auto-label based on title/content
            if (title.includes('bug') || title.includes('error') || title.includes('fail')) {
              labels.push('bug');
            }
            if (title.includes('feature') || title.includes('enhancement') || title.includes('add')) {
              labels.push('enhancement');
            }
            if (title.includes('doc') || title.includes('readme') || title.includes('documentation')) {
              labels.push('documentation');
            }
            if (title.includes('performance') || title.includes('slow') || title.includes('optimization')) {
              labels.push('performance');
            }
            if (title.includes('security') || title.includes('vulnerability')) {
              labels.push('security');
            }

            // Add priority based on keywords
            if (title.includes('urgent') || title.includes('critical') || body.includes('urgent')) {
              labels.push('priority/high');
            } else if (title.includes('important') || body.includes('asap')) {
              labels.push('priority/medium');
            } else {
              labels.push('priority/low');
            }

            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: labels,
              });
            }

            // Add welcome comment for new contributors
            if (issue.author_association === 'NONE') {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `
                üëã Welcome to Ariadne! Thanks for opening your first issue.

                ### Next Steps:
                - [ ] Add appropriate labels if missing
                - [ ] Provide reproduction steps if it's a bug
                - [ ] Include system information if relevant
                - [ ] Link related issues or PRs

                ### Development Resources:
                - [Contributing Guide](https://github.com/${{ github.repository }}/blob/main/CONTRIBUTING.md)
                - [Code of Conduct](https://github.com/${{ github.repository }}/blob/main/CODE_OF_CONDUCT.md)
                - [Documentation](https://github.com/${{ github.repository }}/docs)

                We'll get back to you soon! üöÄ
                `,
              });
            }

  weekly-maintenance:
    name: Weekly Maintenance
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    permissions:
      issues: write
      pull-requests: write
    steps:
      - name: Cleanup old artifacts
        run: |
          echo "üßπ Weekly maintenance tasks..."
          echo "Cleaning up old artifacts and stale items..."

      - name: Close stale issues
        uses: actions/github-script@v7
        with:
          script: |
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['stale'],
            });

            for (const issue of issues) {
              const updatedAt = new Date(issue.updated_at);
              const daysSinceUpdate = (Date.now() - updatedAt) / (1000 * 60 * 60 * 24);

              if (daysSinceUpdate > 14) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: `
                  üóëÔ∏è This issue has been stale for 2 weeks and is being closed.

                  If you believe this issue is still relevant, please:
                  - Add a comment with updated information
                  - Remove the 'stale' label
                  - Provide a reproduction case if it's a bug

                  Feel free to reopen with more details! üîÑ
                  `,
                });

                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  state: 'closed',
                });
              }
            }

      - name: Generate weekly report
        run: |
          echo "üìä Generating weekly development report..."

          # This could generate a summary of:
          # - PRs merged this week
          # - Issues opened/closed
          # - Code coverage trends
          # - Performance benchmarks
          # - Security scan results

          echo "Weekly report generation would go here"

  dependency-updates:
    name: Automated Dependency Updates
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    permissions:
      pull-requests: write
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.11"

      - name: Check for outdated dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pip-check-updates

          echo "üì¶ Checking for outdated dependencies..."

          # Check main dependencies
          pip-check-updates --requirements requirements.in 2>/dev/null || echo "No requirements.in found"

          # Check pyproject.toml dependencies
          if [ -f "pyproject.toml" ]; then
            echo "Checking pyproject.toml dependencies..."
            # Add dependency update logic here
          fi

      - name: Create dependency update PR
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üîÑ Automated Dependency Updates',
              head: 'feature/auto-dependency-update',
              base: 'main',
              body: `
              ## Automated Dependency Updates

              This PR contains automatic updates to project dependencies.

              ### What's Updated:
              - Security patches
              - Bug fixes in dependencies
              - Performance improvements

              ### Next Steps:
              - [ ] Review the changes
              - [ ] Run full test suite
              - [ ] Verify no breaking changes
              - [ ] Merge if all checks pass

              > ü§ñ This PR was created automatically by the dependency update workflow.
              `,
            });
