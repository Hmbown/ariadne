name: CI/CD Notifications

on:
  workflow_run:
    workflows: ["CI/CD Pipeline", "Docker Images"]
    types:
      - completed
  schedule:
    # Daily health check at 8 AM UTC
    - cron: '0 8 * * *'

jobs:
  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'
    steps:
      - name: Get workflow details
        uses: actions/github-script@v7
        with:
          script: |
            const { data: workflow } = await github.rest.actions.getWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.payload.workflow_run.id,
            });

            console.log(`Workflow ${workflow.name} completed successfully`);
            console.log(`Duration: ${Math.round((new Date() - new Date(workflow.created_at)) / 1000)}s`);

  notify-failure:
    name: Notify Failure
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'failure'
    steps:
      - name: Create issue for workflow failure
        uses: actions/github-script@v7
        with:
          script: |
            const { data: workflow } = await github.rest.actions.getWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.payload.workflow_run.id,
            });

            const { data: jobs } = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.payload.workflow_run.id,
            });

            const failedJobs = jobs.jobs.filter(job => job.conclusion === 'failure');

            const issueTitle = `❌ Workflow Failure: ${workflow.name}`;
            const issueBody = `
            ## Workflow Failure Details

            **Workflow:** ${workflow.name}
            **Branch:** ${workflow.head_branch}
            **Commit:** ${workflow.head_sha}
            **Triggered by:** ${workflow.event}
            **Duration:** ${Math.round((new Date() - new Date(workflow.created_at)) / 1000)}s

            ### Failed Jobs:
            ${failedJobs.map(job => `- **${job.name}**: ${job.steps?.find(s => s.conclusion === 'failure')?.name || 'Unknown step'}`).join('\n')}

            ### Actions Needed:
            - [ ] Review failed job logs
            - [ ] Identify root cause
            - [ ] Implement fix
            - [ ] Verify fix resolves issue

            ---
            *This issue was automatically created by the CI/CD notification system.*
            `;

            // Check if similar issue already exists
            const { data: existingIssues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['ci-failure', 'automated'],
              state: 'open',
            });

            const similarIssue = existingIssues.find(issue =>
              issue.title.includes(workflow.name) &&
              new Date(issue.created_at) > new Date(Date.now() - 24 * 60 * 60 * 1000)
            );

            if (!similarIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body: issueBody,
                labels: ['ci-failure', 'automated', 'high-priority'],
              });
            }

  daily-health-check:
    name: Daily Health Check
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Check recent workflow status
        uses: actions/github-script@v7
        with:
          script: |
            const { data: workflows } = await github.rest.actions.listRepoWorkflows({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const ciWorkflow = workflows.workflows.find(w => w.name === 'CI/CD Pipeline');
            const dockerWorkflow = workflows.workflows.find(w => w.name === 'Docker Images');

            if (ciWorkflow) {
              const { data: recentRuns } = await github.rest.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: ciWorkflow.id,
                per_page: 5,
              });

              const failures = recentRuns.workflow_runs.filter(run => run.conclusion === 'failure');

              if (failures.length > 0) {
                console.log(`Found ${failures.length} recent CI failures`);
                // Could send to Slack, Discord, or create summary issue here
              }
            }

            console.log('Daily health check completed');
