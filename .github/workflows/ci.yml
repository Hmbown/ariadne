name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: "3.11"
  PYTHON_VERSIONS: "3.11,3.12"

jobs:
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        
    - name: Lint with ruff
      run: |
        ruff check src/ tests/
        ruff format --check src/ tests/
        
    - name: Type check with mypy
      run: mypy src/ariadne/
      
    - name: Check imports with isort
      run: isort --check-only src/ tests/

  test-linux:
    name: Test (Linux)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        
    - name: Run unit tests
      run: pytest tests/ -v --cov=ariadne --cov-report=xml
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-${{ matrix.python-version }}

  test-macos:
    name: Test (macOS)
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[apple,dev]
        
    - name: Run macOS-specific tests
      run: pytest tests/ -v -m "not slow"
      
    - name: Test Metal backend (Apple Silicon)
      run: |
        python -c "
        import sys
        if sys.platform == 'darwin' and 'arm' in str(sys.version):
            from ariadne.backends.metal_backend import MetalBackend
            backend = MetalBackend()
            print(f'Metal backend available: {backend.backend_mode}')
        else:
            print('Skipping Metal test on non-Apple Silicon')
        "

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] safety
        
    - name: Run bandit security scan
      run: bandit -r src/ -f json -o bandit-report.json
      
    - name: Check dependencies for known vulnerabilities
      run: safety check --json --output safety-report.json
      continue-on-error: true

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        
    - name: Run performance benchmarks
      run: |
        python benchmarks/router_comparison.py --shots 100 --repetitions 1 --output benchmark-results.json
        
    - name: Comment benchmark results
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('benchmark-results.json')) {
            const results = JSON.parse(fs.readFileSync('benchmark-results.json', 'utf8'));
            const comment = `
          ## 🏎️ Performance Benchmark Results
          
          | Circuit | Backend | Mean Time (ms) | Std Dev (ms) |
          |---------|---------|----------------|--------------|
          ${Object.entries(results).map(([circuit, data]) => 
            `| ${circuit} | ${data.backend} | ${data.mean_time.toFixed(2)} | ${data.std_time.toFixed(2)} |`
          ).join('\n')}
          
          _Benchmarks run on GitHub Actions runners. Results may vary on different hardware._
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [code-quality, test-linux]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip build twine
        
    - name: Build package
      run: python -m build
      
    - name: Check package
      run: twine check dist/*
      
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: release
    permissions:
      id-token: write
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/
        
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1