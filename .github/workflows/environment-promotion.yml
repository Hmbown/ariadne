name: Environment Promotion

on:
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    types:
      - completed
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production
      version:
        description: "Version to deploy (leave empty for latest)"
        required: false
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  promote-to-staging:
    name: Promote to Staging
    runs-on: ubuntu-latest
    if: |
      (github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main') ||
      (github.event_name == 'workflow_dispatch' && inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging.ariadne.dev
    permissions:
      contents: read
      packages: write
      deployments: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=staging-{{date 'YYYYMMDD-HHmmss'}}
            type=raw,value=staging-latest
            type=ref,event=branch

      - name: Pull and tag image for staging
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging-latest
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging-${{ steps.meta.outputs.version }}

      - name: Push staging image
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging-latest
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging-${{ steps.meta.outputs.version }}

      - name: Deploy to staging
        run: |
          echo "üöÄ Deploying to staging environment..."
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging-latest"
          # Add actual deployment commands here
          # kubectl set image deployment/ariadne ariadne=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging-latest -n staging
          # kubectl rollout status deployment/ariadne -n staging

      - name: Run smoke tests
        run: |
          echo "üß™ Running smoke tests against staging..."
          # Add smoke test commands here
          # curl -f https://staging.ariadne.dev/health || exit 1

  promote-to-production:
    name: Promote to Production
    runs-on: ubuntu-latest
    needs: promote-to-staging
    if: |
      (github.event_name == 'workflow_dispatch' && inputs.environment == 'production') ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success' && contains(github.event.workflow_run.head_commit.message, '[release]'))
    environment:
      name: production
      url: https://ariadne.dev
    permissions:
      contents: read
      packages: write
      deployments: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create production tag
        id: tag
        run: |
          if [ -n "${{ inputs.version }}" ]; then
            TAG="${{ inputs.version }}"
          else
            TAG="v$(date +%Y.%m.%d)-$(git rev-parse --short HEAD)"
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Promote staging image to production
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging-latest
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging-latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging-latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.tag }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.tag }}

      - name: Deploy to production (Blue-Green)
        run: |
          echo "üöÄ Deploying to production using blue-green strategy..."
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.tag }}"

          # Blue-Green deployment strategy
          # 1. Deploy to green environment
          # 2. Run health checks
          # 3. Switch traffic to green
          # 4. Monitor for issues
          # 5. Keep blue as rollback option

          # Example commands:
          # kubectl apply -f k8s/green-deployment.yaml
          # kubectl wait --for=condition=available deployment/ariadne-green -n production --timeout=300s
          # kubectl patch service ariadne -p '{"spec":{"selector":{"version":"green"}}}' -n production

      - name: Production health checks
        run: |
          echo "üè• Running production health checks..."
          # Add comprehensive health checks
          # curl -f https://ariadne.dev/health || exit 1
          # curl -f https://ariadne.dev/api/v1/status || exit 1

      - name: Create release
        if: github.event_name == 'workflow_dispatch'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          release_name: "Release ${{ steps.tag.outputs.tag }}"
          body: |
            ## Release ${{ steps.tag.outputs.tag }}

            This release was deployed to production via automated promotion.

            **Image:** ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.tag }}
            **Deployed:** $(date -u +"%Y-%m-%dT%H:%M:%SZ")

            ### Verification
            - [x] Automated tests passed
            - [x] Staging deployment verified
            - [x] Production health checks passed

            ### Rollback
            To rollback if needed:
            ```bash
            kubectl patch service ariadne -p '{"spec":{"selector":{"version":"blue"}}}' -n production
            ```
          draft: false
          prerelease: false

  rollback-if-needed:
    name: Rollback if Issues Detected
    runs-on: ubuntu-latest
    if: failure() && needs.promote-to-production.result == 'failure'
    needs: promote-to-production
    environment:
      name: production
    permissions:
      contents: read
      deployments: write
    steps:
      - name: Automatic rollback
        run: |
          echo "üö® Critical issues detected, initiating automatic rollback..."
          echo "Rolling back to previous stable version..."

          # Rollback commands
          # kubectl patch service ariadne -p '{"spec":{"selector":{"version":"blue"}}}' -n production
          # kubectl rollout undo deployment/ariadne -n production

      - name: Create rollback issue
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üö® Production Rollback Performed',
              body: `
              ## Automatic Rollback Completed

              **Time:** ${new Date().toISOString()}
              **Reason:** Production deployment failed health checks
              **Action:** Traffic routed back to previous stable version

              ### Immediate Actions Required:
              - [ ] Investigate root cause of deployment failure
              - [ ] Review application logs
              - [ ] Fix issues before attempting redeployment
              - [ ] Test fixes thoroughly in staging

              ### Rollback Status: ‚úÖ COMPLETED
              *Previous version is now serving live traffic.*

              ---
              *This issue was automatically created during a production rollback.*
              `,
              labels: ['rollback', 'production', 'critical', 'automated'],
            });
