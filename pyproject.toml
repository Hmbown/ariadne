[project]
name = "ariadne-quantum"
version = "1.0.0"
description = "Ariadne: The Intelligent Quantum Router - Google Maps for Quantum Circuits with Apple Silicon & CUDA acceleration"
readme = "README.md"
requires-python = ">=3.11"
license = { text = "MIT" }
authors = [
  { name = "Shannon Labs" }
]
keywords = ["quantum", "simulator", "qasm3", "quantum-computing", "apple-silicon", "cuda", "jax", "metal", "intelligent-routing", "bell-labs", "shannon-labs"]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "Intended Audience :: Education",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Scientific/Engineering",
  "Topic :: Scientific/Engineering :: Physics",
  "Topic :: Education",
  "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
  "qiskit>=2.1.1",
  "qiskit-aer>=0.17.2",
  "stim>=1.15.0",
  "quimb>=1.11.2",
  "cotengra>=0.7.5",
  "opt_einsum>=3.3",
  "mqt.ddsim>=2.0.0",
  "numpy>=1.21",
  "scipy>=1.7",
  "networkx>=3.0",
  "matplotlib>=3.5.0",
  "pytest>=7.0.0",
]

[project.optional-dependencies]
cuda = [
  "cupy-cuda12x>=12.0.0"
]
apple = [
  "jax>=0.4; platform_system=='Darwin' and platform_machine=='arm64'",
  "jaxlib>=0.4; platform_system=='Darwin' and platform_machine=='arm64'",
  "jax-metal>=0.1; platform_system=='Darwin' and platform_machine=='arm64'",
]
viz = [
  "matplotlib>=3.5",
  "seaborn>=0.11",
  "plotly>=5.0",
]
dev = [
  "pytest>=7.0",
  "pytest-cov>=3.0",
  "black>=22.0",
  "isort>=5.10",
  "pre-commit>=2.17",
  "mypy>=0.950",
]
docs = [
  "sphinx>=5.0",
  "sphinx-rtd-theme>=1.2",
  "myst-parser>=0.18",
]

[project.scripts]
ariadne = "ariadne.router:simulate"

[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.lint]
select = ["E", "F", "I", "N", "B", "C4", "UP"]
ignore = ["E501", "B008"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["B011"]
"examples/*" = ["B006"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "-v --tb=short --strict-markers"
markers = [
  "slow: marks tests as slow (deselect with '-m \"not slow\"')",
  "integration: marks tests as integration tests",
  "unit: marks tests as unit tests",
  "benchmark: marks tests as benchmark tests",
]

[tool.coverage.run]
source = ["ariadne"]
omit = ["*/tests/*", "*/test_*"]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if self.debug:",
  "if settings.DEBUG",
  "raise AssertionError",
  "raise NotImplementedError",
  "if 0:",
  "if __name__ == .__main__.:",
  "class .*\\bProtocol\\):",
  "@(abc\\.)?abstractmethod",
]

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
where = ["."]
include = ["ariadne*"]
exclude = ["tests*", "docs*"]

[tool.setuptools.package-data]
ariadne = ["*.txt", "*.md", "*.yml", "*.yaml"]
